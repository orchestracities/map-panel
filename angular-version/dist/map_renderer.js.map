{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","console","debug","panel","mapCenter","setLocationByUserGeolocation","mapCenterMoved","createMap","layersChanged","log","map","remove","resize","panToMapCenter","clearLayers","drawPoints","renderingCompleted","_","isEqual","layerNames","Object","keys","overlayMaps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,MAAMC,YAAY,GAAGH,IAAI,CAACI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;AAEAF,EAAAA,IAAI,CAACG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,WAAMC,MAAM,EAAZ;AAAA,GAAzB;;AAEA,WAASA,MAAT,GAAkB;AAChB,QAAI,CAACL,IAAI,CAACM,IAAV,EAAgB,OADA,CAGhB;;AACA,QAAI,CAACN,IAAI,CAACO,QAAV,EAAoB;AAClBP,MAAAA,IAAI,CAACO,QAAL,GAAgB,IAAIC,oBAAJ,CAAaR,IAAb,EAAmBC,YAAnB,CAAhB;AACAQ,MAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd;;AAEA,UAAIV,IAAI,CAACW,KAAL,CAAWC,SAAX,KAAyB,kBAA7B,EAAiD;AAC/CZ,QAAAA,IAAI,CAACa,4BAAL;AACD;AAAC;;;;;;AAFF,WAOUb,IAAI,CAACc,cAAL,GAAsB,IAAtB;;AAEVd,MAAAA,IAAI,CAACO,QAAL,CAAcQ,SAAd;AACD;AAAC;;;;;;;AAMF,QAAIC,aAAa,EAAjB,EAAqB;AACnBP,MAAAA,OAAO,CAACQ,GAAR,CAAY,qBAAZ;AACAjB,MAAAA,IAAI,CAACO,QAAL,CAAcW,GAAd,CAAkBC,MAAlB;AACAnB,MAAAA,IAAI,CAACO,QAAL,CAAcQ,SAAd;AACD;;AAEDf,IAAAA,IAAI,CAACO,QAAL,CAAca,MAAd;;AAEA,QAAIpB,IAAI,CAACc,cAAT,EAAyB;AACvBd,MAAAA,IAAI,CAACO,QAAL,CAAcc,cAAd;AACD;;AAEDrB,IAAAA,IAAI,CAACO,QAAL,CAAce,WAAd,GApCgB,CAuChB;;AACAtB,IAAAA,IAAI,CAACO,QAAL,CAAcgB,UAAd;AAEA;;;;AAIAvB,IAAAA,IAAI,CAACwB,kBAAL;AACD,GApDoD,CAsDrD;;;AACA,WAASR,aAAT,GAAyB;AACvB,WAAO,CAACS,mBAAEC,OAAF,CAAU1B,IAAI,CAAC2B,UAAf,EAA2BC,MAAM,CAACC,IAAP,CAAY7B,IAAI,CAACO,QAAL,CAAcuB,WAA1B,CAA3B,CAAR;AACD;AACF","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { getUserLocation } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    // map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n\n      if (ctrl.panel.mapCenter === 'User Geolocation') {\n        ctrl.setLocationByUserGeolocation();\n      } /* else\n      detect city change when using Location Variable\n      if (ctrl.panel.mapCenter === 'Location Variable') { // && this.ctrl.isADiferentCity()\n        console.log('centering at city');\n        ctrl.setNewCoords();\n      } */ else ctrl.mapCenterMoved = true;\n\n      ctrl.worldMap.createMap();\n    } /* else\n    if (ctrl.panel.mapCenter === 'Location Variable' && ctrl.isADiferentCity()) {\n      console.log('centering at new city');\n      ctrl.setNewCoords();\n    } */\n\n    if (layersChanged()) {\n      console.log('layers had changed!');\n      ctrl.worldMap.map.remove();\n      ctrl.worldMap.createMap();\n    }\n\n    ctrl.worldMap.resize();\n\n    if (ctrl.mapCenterMoved) {\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n\n\n    // ctrl.worldMap.filterEmptyData();\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * popups and graph display\n    */\n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"],"file":"map_renderer.js"}