{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["dataFormatter","DataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","panel","PANEL_DEFAULTS","mapLocationsLabels","Object","keys","MAP_LOCATIONS","iconTypes","ICON_TYPES","defaultMetrics","DEFAULT_METRICS","colorTypes","COLOR_TYPES","clusterTypes","CLUSTER_TYPES","markerColors","MARKER_COLORS","events","on","onInitEditMode","bind","onDataError","onDataReceived","onPanelTeardown","handleClickAddMetric","addMetric","handleRemoveMetric","removeMetric","metrics","push","index","splice","refresh","addEditorTab","PLUGIN_PATH","dataList","dashboard","snapshot","locations","snapshotLocationData","console","debug","length","data","getValues","layerNames","render","error","warn","message","worldMap","map","remove","tileServer","user","lightTheme","saturationClass","log","navigator","geolocation","getCurrentPosition","position","coordinates","coords","recenterMap","geolocationOptions","mapCenter","setLocationByUserGeolocation","mapCenterMoved","latitude","mapCenterLatitude","longitude","mapCenterLongitude","setZoom","initialZoom","showLegend","removeLegend","clearLayers","updateThresholdData","legend","update","scope","elem","attrs","ctrl","MetricsPanelCtrl","templateUrl"],"mappings":"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","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* Grafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport { defaultsDeep } from 'lodash';\n/* App specific */\nimport {\n  PLUGIN_PATH, PANEL_DEFAULTS, DEFAULT_METRICS, MAP_LOCATIONS, ICON_TYPES, MARKER_COLORS, COLOR_TYPES, CLUSTER_TYPES\n} from './definitions';\nimport { getDatasources, getValidDatasources } from './utils/datasource';\n\nimport { getCityCoordinates, getSelectedCity, geolocationOptions } from './utils/map_utils';\n\nimport mapRenderer from './map_renderer';\nimport { DataFormatter, dataRecievedIsTheSame } from './utils/data_utils';\n\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nconst dataFormatter = new DataFormatter();\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.setMapProvider(contextSrv);\n    defaultsDeep(this.panel, PANEL_DEFAULTS);\n\n    // helper vars definitions to be used in editor\n    this.mapLocationsLabels = [...Object.keys(MAP_LOCATIONS), 'Location Variable', 'Custom', 'User Geolocation'];\n    this.iconTypes = ICON_TYPES;\n    this.defaultMetrics = DEFAULT_METRICS;\n    this.colorTypes = COLOR_TYPES;\n    this.clusterTypes = CLUSTER_TYPES;\n    this.markerColors = MARKER_COLORS;\n    //this.environmentVars = this.templateSrv.variables.map((elem) => elem.name);\n\n    //this.variables = this.templateSrv.variables;\n    //this.variableSrv = variableSrv;\n    // bind grafana events\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this)); // process resultset as a result of the execution of all queries\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    // bind specific editor events\n    this.handleClickAddMetric = this.addMetric.bind(this);\n    this.handleRemoveMetric = this.removeMetric.bind(this);\n  }\n\n  // adds a empty line in order to allow adding new metric in editor\n  addMetric() {\n    this.panel.metrics.push(['', '', '']);\n  }\n\n  // removes specific metric in editor\n  removeMetric(index) {\n    this.panel.metrics.splice(index, 1);\n    this.refresh();\n  }\n\n  // process the event of clicking the Worldmap Tab\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', `${PLUGIN_PATH}partials/editor.html`, 2);\n  }\n\n  /*\n  * Process the resultset\n  * @dataList: The resultset from the executed query\n  */\n  onDataReceived(dataList) {\n    // console.debug('dataList:')\n    // console.debug(dataList)\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    if (!dataList) {\n      console.debug('No dataList recieved but continuing...');\n      return;\n    }\n    if (dataList.length === 0) {\n      console.debug('Empty dataList. returning...');\n      return;\n    }\n\n    this.data = dataFormatter.getValues(dataList);// , this.panel.metrics);\n    this.layerNames = Object.keys(this.data);\n    this.render();\n  }\n\n  onDataError(error) {\n    if (error && error.data && error.data.error) {\n      console.warn('Error: ' + error.data.error.message);\n    }\n    this.onDataReceived([]);\n  }\n\n  onPanelTeardown() {\n    if (this.worldMap) {\n      // console.debug('Cleaning map')\n      this.worldMap.map.remove();\n    }\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : '';\n  }\n\n  setLocationByUserGeolocation(render = false) {\n    console.log('User Geolocation');\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const coordinates = position.coords;\n          this.recenterMap(coordinates);\n          if (render) this.render();\n        },\n        (error) => console.log('Unable to get location!'),\n        geolocationOptions\n      );\n    } else {\n      console.log('Geolocation is not supported by this browser.');\n    }\n  }\n\n  // var watchID = navigator.geolocation.watchPosition\n  // navigator.geolocation.clearWatch(watchID)\n  setNewMapCenter() {\n    console.debug(this.panel.mapCenter);\n    if (this.panel.mapCenter === 'User Geolocation') {\n      this.setLocationByUserGeolocation(true);\n    } else\n    /* if (this.panel.mapCenter === 'Location Variable') { // && this.isADiferentCity()\n      this.setNewCoords();\n    } else */\n    if (this.panel.mapCenter === 'Custom') {\n      this.mapCenterMoved = true;\n      this.render();\n    } else { // center at continent or area\n      // console.info('centering at City/Continent location')\n      const coordinates = {latitude: MAP_LOCATIONS[this.panel.mapCenter].mapCenterLatitude, longitude: MAP_LOCATIONS[this.panel.mapCenter].mapCenterLongitude};\n      this.recenterMap(coordinates);\n      this.render();\n    }\n  }\n\n  /*isADiferentCity() {\n    return (getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable) !== this.panel.city);\n  }*/\n\n  /*\n    setNewCoords() {\n    const city = getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable);\n    console.debug('selecting new city: ' + city);\n    return getCityCoordinates(city)\n      .then((coordinates) => {\n        this.panel.city = city;\n        if (coordinates) {\n          this.recenterMap(coordinates);\n          this.render();\n        } else console.log('Coordinates not available for the selected location ' + city);\n      })\n      .catch((error) => console.warn(error));\n  }\n  */\n  recenterMap(coordinates) {\n    console.debug('recentering at new coordinates');\n    // console.debug(coordinates)\n    this.panel.mapCenterLatitude = coordinates.latitude;\n    this.panel.mapCenterLongitude = coordinates.longitude;\n    this.mapCenterMoved = true;\n  }\n\n  setZoom() {\n    this.worldMap.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.worldMap.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.worldMap.clearLayers();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.worldMap.legend.update();\n    this.render();\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"],"file":"worldmap_ctrl.js"}